<?xml version="1.0" encoding="UTF-8"?>
<node name="scene_01" type="scene">
  <node name="root" type="basic">
    
<!-- node: should always be rendered from the position of the player (like it's moving w/ the player) -->
    <node name="sky|skydome" type="scene">
      <unit name="skydome" scope="model">
        <model name="skydome" shape="hemisphere"/>
      </unit>
      <node name="root" type="joint">
        
        <node name="clouds" type="scene">
          <unit>
            <model type="procedural" strategy="perlin+some+options"/>
          </unit>
        </node>
        
        <node name="sun" type="scene">
          <unit>
<!-- node: create on CPU (vbo...) or on GPU (using a vertex shader & some math) + should ALWAYS be orientated to camera -->
            <model shape="circle" divisions="4=square,6=hexagon..."> 
              <geometry>
                <mesh>
                  <material>
                    <channel type="EMISSION" color="white"/>
                  </material>
                </mesh>
              </geometry>
            </model>
            <light name="sun" type="direct"/>
          </unit>
        </node> <!-- /node:sun -->
        
      </node>
    </node> <!-- /node:skydome -->
    
<!-- note: nodes: node*joint=linked to skeleton node*node=simple(default,no skeleton)   -->
    <node name="lake" type="scene">
      <unit name="lake" scope="model">
        <model shape="volume">
<!-- note: this animator should affect the *_paddle nodes -->
          <animator type="waves" waves="volumetric"/>
        </model>
      </unit>
      <node name="root" type="node|joint">
        
<!-- node: when a paddle collides w/ the water/lake a splash is created, then destroyed -->
        <node name="splash" type="scene">
          <unit name="splash" scope="effect">
            <emitter name="splash" />
<!-- note: decal on the surface of the water, dynamically created using water's polygons, w/ a transparent material -->
            <model name="decal">
              <geometry>
                <mesh type="polygon"/>
              </geometry>
            </model>
          </unit>
        </node> <!-- /node:splash -->
        
<!-- note: linke paddles to boat -->
        <node name="boat" type="scene">
          <unit name="boat" scope="model">
            <model />
          </unit>
          <node name="root" type="joint">
            
            <node name="R_paddle" type="joint">
              
              <node name="paddle" type="scene">
                <unit name="paddle" scope="model">
                  <model name="paddle"/>
                </unit>
              </node> <!-- /node:paddle -->
                    
            </node>
            <node name="L_paddle" type="joint">
              
              <node name="paddle" type="scene">
                <unit name="paddle" scope="model">
                  <model name="paddle"/>
                </unit>
              </node> <!-- /node:paddle -->
              
            </node>
          </node>
        </node> <!-- /node:boat -->
        
      </node>
    </node> <!-- /node:lake -->
    
    <node name="puddle" type="scene">
      <unit name="puddle" scope="model">
        <model shape="plane">
          <animator type="waves" waves="plannar"/>
        </model>
      </unit>
      <node name="root" type="joint"/>
    </node> <!-- /node:puddle -->
    
    <node name="ground" type="scene">
      <unit name="ground" scope="model">
        <model name="terrain"/>
        <force name="gravity" value="-9.81" function="constant" />
      </unit>
      <node name="root" type="joint" joint="@terrain@root">

<!-- note: magical aparatus w/ 2 floating balls controlled by script -->
        <node name="aparatus" type="scene"> 
          <unit name="aparatus" scope="model">
            <model file="./path/to/aparatus/base.mdl"/>
            <control name="aparatus" file="./path/to/script.lua" />
          </unit>
          <node name="root" type="joint">
            
            <node name="ball0" type="scene">
              <unit name="ball" scope="model"/>
              <node name="root" type="joint" />
            </node> <!-- /node:ball0 -->
            
            <node name="ball1" type="scene">
              <unit name="ball" scope="model"/>
              <node name="root" type="joint" />
            </node> <!-- /node:ball1 -->
                
          </node>
        </node> <!-- /node:aparatus -->
        
        <node name="castle" type="scene"/> <!-- /node:castle -->
        
        <node name="house" type="scene">
          <unit name="house" scope="model">
            <model file="./path/to/house.mdl" />
          </unit>
          <node name="root" type="joint">
            
            <node name="table" type="scene">
              <unit name="table" scope="model">
                <model file="./path/to/table.mdl" />
              </unit>
              <node name="root" type="joint">
                
                <node name="bucket" type="scene">
                  <unit name="bucket" scope="model">
                    <model name="bucket">
                      <geometry>
                        <mesh name="bucket"/>
                        <mesh name="water"/>
                      </geometry>
<!-- note: if imported model doesnt' have a skeleton, build one w/ root + joints for each mesh -->
                      <skeleton>
                        <joint name="root">
                          <joint name="bucket"/>
                          <joint name="water" />
                        </joint>
                      </skeleton>
                      <animator type="fluid"/>
                    </model>
                  </unit>
                  
                </node> <!-- /node:bucket -->
                
              </node>
            </node> <!-- /node:house -->
            
          </node>
        </node> <!-- /node:house -->
        
<!-- note: dragon (model + effect + force + controller (trigger + cone) -->
        <node name="dragon" type="scene" id="basicDragon"> 
          <unit name="dragon" id="dragon01" scope="model">
            <model name="dragon" unit="#dragon01">
              <config what="geometry"/>
              <animator />
<!-- note: skeleton joints: these get merged w/ the ones from the model, custom ones get added -->
              <skeleton>
                <joint name="root">
                  <joint name="torso">
                    ...
                    <joint name="R_B_leg"/>
                    ...
                  </joint>
                </joint>
              </skeleton>
            </model>
          </unit>
          <node name="root@dragon" type="joint">
            <node name="torso" type="joint" link="to_torso_skeleton_joint_in_unit_model_skeleton">
              <node name="R_F_leg">
                <node name="R_F_paw">
                  
<!-- node: shackle dragon leg - chain should be animated by the physics engine -->
                  <node name="shackle" type="scene">
                    <unit name="shackle" scope="model">
                      <model name="shackle">
                        <geometry>
                          <mesh name="body"/>
                          <mesh name="chain"/>
                        </geometry>
                        <animator type="physics"/>
                      </model>
                    </unit>
                  </node> <!-- /node:shackle -->
                  
                </node>
              </node>
              <node name="L_F_leg"/>
              <node name="R_B_leg" joint="@dragon@R_B_leg"/>
              <node name="L_B_leg"/>
              <node name="tail" type="joint"/>
              <node name="head" type="joint">
                
                <node name="fireBreath" type="scene">
                  <unit name="fireBreath" scope="trigger">
                    <trigger name="fireTrigger" shape="cone"/>
                    <emitter name="fire" type="fire" position="tx ty tz" />
                    <light name="fire" type="spot" position="tx ty tz" direction="tx ty tz" />
                    <force name="fire" type="push" force="2.4" function="inverseSquare" />
                  </unit>
                  <node name="root" type="joint"/>
                </node> <!-- /node:fireBreath -->
                
                <node name="R_ear" type="joint"/>
                <node name="L_ear" type="joint"/>
              </node>
              <node name="saddle" type="joint">
    
<!-- note: saddle (model) -->
                <node name="saddle" type="scene">
                  <unit name="saddle" scope="model">
                    <model name="saddle" unit="@saddle"/>
                  </unit>
                  <node name="root" type="joint">
                    
<!-- note: knight(model) + sword (model) + torch (model + effect/fire + light)  -->
                    <node name="knight" type="scene"> 
                      <unit name="knight" scope="model">
                          <model name="knight" unit="@knight">
                          <geometry>
                            ...
                            <mesh name="gauntlets">
                              <material>
                                <channel type="diffuse">
                                  <texture file="../path/to/override.tex"/>
                                </channel>
                              </material>
                            </mesh>
                            ...
                          </geometry>
                          <animator type="frame">
                            <animation file="../path/to/animation.ani"/>
                          </animator>
                          <skeleton>
                            <joint name="root" uid="joint01">
                              <joint name="torso">
                                ...
                                <joint name="scabbard"/>
                                ...
                              </joint>
                            </joint>
                          </skeleton>
                        </model>
                      </unit>
                      <node name="root" type="joint">
                        <node name="torso" type="joint">
                          <node name="head" type="joint">
                            
<!-- note: camera controlled by the player -->
                            <node name="camera" type="scene">
                              <unit name="player" scope="camera" controller="./path/to/controller.lua">
                                <camera name="player" unit="@player"/>
                              </unit>
                              <node name="root" type="joint"/>
                            </node> <!-- /node:camera -->
                            
                            <node name="helmet" type="scene">
                              <unit name="helmet" scope="model">
                                <model name="helmet" unit="@helmet"/>
                              </unit>  
                              <node name="root" type="joint"/>
                            </node> <!-- /node:helmet -->
                            
                          </node>
                          <node name="scabbard" type="joint" joint="scabbard">
                            
                            <node name="scabbard" type="scene">
                              <unit name="scabbard" scope="model">
                                <model name="scabbard" unit="@scabard"/>
                              </unit>
                              <node name="root" type="joint">
<!-- note: here goes node:iceSword when sheathed = moved from [R_hand] to [scabbard] -->
                              </node>
                            </node> <!-- /node:scabbard -->
                            
                          </node>
                          <node name="R_arm" type="joint" joint="R_arm">
                            <node name="R_hand" type="joint">
    
<!-- note: ice sword (model + effect) -->
                              <node name="iceSword" type="entity"> 
                                <unit name="iceSword" scope="model">
                                  <model name="iceSword" unit="@iceSword">
                                    <geometry>
                                      <mesh name="blade">
<!-- note: apply material ON TOP of original material, blend them together -->
                                        <material method="blend|override">
                                          <channel type="diffuse">
                                          </channel>
                                        </material>
                                      </mesh>
                                    </geometry>
                                  </model>
                                  <emitter name="frost" />
                                </unit>
                                <node name="root" type="joint"/>
                              </node> <!-- /node:iceSword -->
                              
                            </node>
                          </node>
                          <node name="L_arm" type="joint">
                            <node name="L_hand" type="joint" joint="L_hand">
                              
<!-- note: torch (model + effect + light) -->
                              <node name="torch" type="entity">
                                <unit name="torch" scope="model">
                                  <model name="torch" unit="@torch"/>
                                  <emitter type="fire"/>
                                  <light type="omni"/>
                                </unit>
                                <node name="root" type="joint"/>
                              </node> <!-- /node:torch -->
                              
                            </node>
                          </node>
                        </node>
                      </node>
                    </node> <!-- /node:knight -->
                    
                  </node>
                </node> <!-- /node:saddle -->
                
              </node>
            </node>
          </node>
        </node> <!-- /node:dragon -->
        
<!-- node: load another instanceof #basicDragon (though node manager) w/ a texture/color change -->
        <node name="dragon" type="scene" ref="basicDragon">
        </node> <!-- /node:dragon -->
        
      </node>
    </node> <!-- /node:ground --> 
    
    <node name="floatIsle" type="scene">
      <unit name="floatIsle" scope="model">
        <model/>
        <force name="gravity" type="attractor|repulsor|centrifugal"  />
        <emitter type="rain" />
        <force name="wind" />
      </unit>
      <node name="root" type="joint">
        
<!-- note: fire tornado (model + effect + force + light) -->
        <node name="firenado" type="scene">
          <unit name="firenado" scope="effect" file="./path/to/controller.lua">
            <force type="centrifugal" radius="20" />
            <model />
            <emitter name="fire" file="./path/to/shader.xml" time="10" />
            <light />
            <emitter name="dust" file="./path/to/shader.xml" time="10" />
          </unit>
          <node name="root" type="joint"/>
        </node> <!-- /node:firenado -->
        
      </node>
    </node> <!-- /node:floatIsle -->
    
    
<!-- test: burning soldier  -->
    <node name="test" type="scene">
      <node name="soldier" type="model">
        <model name="soldier">
          <geometry/>
        </model>
        <node name="root" type="joint">
          <node name="torso" type="joint">
<!-- note: type=joint => can ONLY hold other node(s) -->
            <node name="L_arm" type="joint">
              
<!-- node: type=scene => added on an octree leaf -->
              <node name="shield" type="scene">
<!-- note: (entity) type=model => bound to the parent node:scene -->
                <node name="shield" type="model">
                  <model name="shield"/>
                </node>
              </node> <!-- /node:scene (sword) -->
              
              <node name="L_hand"/>
              
            </node>
            <node name="R_arm">
              <node name="R_hand">
                
                <node name="sword" type="scene">
                  <node name="sword" type="model">
                    <model name="sword"/>
                  </node>
                </node> <!-- /node:scene (sword) -->
                
              </node>
            </node>
          </node>
        </node>
      </node> <!-- /node:scene (soldier) -->
      
<!-- note: (entity) type=emitter => bound to parent node:scene -->
      <node name="fire" type="emitter">
<!-- note: emitter, bound to a mesh, emits particles from the mesh surface, (ex: droplets from polys facing down) -->
        <emitter/>
        <node name="root" type="basic">
          
<!-- note: (entity) type=light => bound to parent node:scene -->
          <node name="light" type="light">
            <light type="omni|direct|spot|area" />
            <node name="root" type="joint"/>
          </node> <!-- /node:light (light) -->
          
        </node>
      </node> <!-- /node:emitter (fire) -->
    </node> <!-- /node:scene (test) -->
    
  </node>
</node> <!-- /node:scene_01 -->

<?xml version="1.0" encoding="UTF-8"?>
<node name="scene_01" type="scene">
  <node name="root">
    
<!-- node: should always be rendered from the position of the player (like it's moving w/ the player) -->
    <node name="sky|skydome" type="scene">
<!-- note: sky = (dome + clouds + sun (model + light)) -->
      <node name="dome" type="model">
        <model name="dome" shape="hemisphere"/>
      </node>
        
<!-- note: coulds do not exist independently of the sky -->
      <node name="clouds" type="model">
        <model type="procedural" strategy="perlin+some+options"/>
      </node>
      
<!-- note: the sun does not exist independently of the sky -->
      <node name="sun" type="model">
<!-- node: create on CPU (vbo...) or on GPU (using a vertex shader & some math) + should ALWAYS be orientated to camera -->
        <model shape="circle" divisions="4=square,6=hexagon..."> 
          <geometry>
            <mesh>
              <material>
                <channel type="EMISSION" color="white"/>
              </material>
            </mesh>
          </geometry>
        </model>
        <node name="root">
          <node name="light" type="light">
            <light name="sun" type="direct"/>
          </node>
        </node>
        
      </node>
    </node> <!-- /node:skydome -->
    
<!-- note: nodes: node*joint=linked to skeleton node*node=simple(default,no skeleton)   -->
    <node name="lake" type="scene">
      <node name="lake" type="model">
        <model shape="volume">
<!-- note: this animator should affect the *_paddle nodes -->
          <animator type="waves" waves="volumetric"/>
        </model>
        <node name="root" type="node|joint">
        
<!-- node: when a paddle collides w/ the water/lake a splash is created, then destroyed -->
          <node name="splash" type="scene">
            <node name="splash" type="emitter">
              <emitter name="splash" />
<!-- note: decal on the surface of the water, dynamically created using water's polygons, w/ a transparent material -->
            </node>
            <node name="decal" type="model">
              <model name="decal">
                <geometry>
                  <mesh type="polygon"/>
                </geometry>
              </model>
            </node>
          </node> <!-- /node:splash -->
        
<!-- note: linke paddles to boat -->
          <node name="boat" type="scene">
            <node name="boat" scope="model">
              <model />
              <node name="root" type="joint">
                <node name="R_paddle" type="joint" joint="joint_in_model_skeleton">
                  
                  <node name="paddle" type="scene">
                    <node name="paddle" type="model">
                      <model name="paddle"/>
                    </node>
                    <node name="root"/>
                  </node> <!-- /node:paddle -->
                        
                </node>
                <node name="L_paddle" type="joint">
                  
                  <node name="paddle" type="scene">
                    <node name="paddle" type="model">
                      <model name="paddle"/>
                      <node name="root" type="node"/>
                    </node>
                  </node> <!-- /node:paddle -->
                  
                </node>
              </node>
            </node>
          </node> <!-- /node:boat -->
        
        </node>
      </node>
    </node> <!-- /node:lake -->
    
<!-- note: burningSoldier = (model + emitter (+light)) -->
    <node name="burningSoldier" type="scene">
      <node name="soldier" type="model">
        <model name="soldier">
          <geometry/>
        </model>
        <node name="root" type="joint">
          <node name="torso" type="joint">
<!-- note: type=joint => can ONLY hold other node(s) -->
            <node name="L_arm" type="joint">
              
<!-- node: type=scene => added on an octree leaf -->
              <node name="shield" type="scene">
<!-- note: (entity) type=model => bound to the parent node:scene -->
                <node name="shield" type="model">
                  <model name="shield"/>
                </node>
              </node> <!-- /node:scene (sword) -->
              
              <node name="L_hand"/>
              
            </node>
            <node name="R_arm">
              <node name="R_hand">
                
                <node name="sword" type="scene">
                  <node name="sword" type="model">
                    <model name="sword"/>
                  </node>
                </node> <!-- /node:scene (sword) -->
                
              </node>
            </node>
          </node>
        </node>
      </node> <!-- /node:scene (soldier) -->
      
<!-- note: (entity) type=emitter => bound to parent node:scene -->
      <node name="fire" type="emitter">
<!-- note: emitter, bound to a mesh, emits particles from the mesh surface, (ex: droplets from polys facing down) -->
        <emitter/>
        <node name="root" type="basic">
          
<!-- note: (entity) type=light => bound to parent node:scene -->
          <node name="light" type="light">
            <light type="omni|direct|spot|area" />
            <node name="root" type="joint"/>
          </node> <!-- /node:light (light) -->
          
        </node>
      </node> <!-- /node:emitter (fire) -->
    </node> <!-- /node:scene (test) -->
    
<!-- note: an empty node w/ a controller - (ex: will fire controller on enter) -->
    <node name="trigger|event|switch" type="scene" controller="file@./path/to/controller.script">
<!-- node: CMyNewController : COnEnterController { onEnter() } -->
<!-- note: this should be done by an external script (like lua/js) -->
    </node>
    
  </node>
</node> <!-- /node:scene_01 -->
